{"ast":null,"code":"var _jsxFileName = \"/Users/francesca/Documents/Games/triple-triad/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Client } from 'boardgame.io/react';\nimport { Game } from 'boardgame.io/core';\n\nclass GameBoard extends Component {\n  onCardClick(id) {\n    this.props.moves.selectCard(id);\n  } // when grid cell is clicked\n\n\n  onClick(id) {\n    console.log(id);\n\n    if (this.isActive(id)) {\n      this.props.moves.selectCell(id);\n      this.props.events.endTurn();\n    }\n  }\n\n  isActive(id) {\n    if (!this.props.isActive) return false;\n    if (this.props.G.cells[id].card !== null) return false;\n    return true;\n  }\n\n  isFirstPlayer() {\n    return this.props.ctx.currentPlayer === '0';\n  }\n\n  playerCaptured(id) {\n    if (id === null) {\n      return 'blank';\n    } else {\n      return id === 0 ? 'player1' : 'player2'; // if it's player 1 that put the card, return player1 class\n      // else, if it's player 2,  return player2 class\n    }\n  }\n\n  render() {\n    let winner = '';\n\n    if (this.props.ctx.gameover) {\n      winner = this.props.ctx.gameoever.winner !== undefined ? React.createElement(\"div\", {\n        id: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Winner: \", this.props.ctx.gameover.winner) : React.createElement(\"div\", {\n        id: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Draw!\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"tripleTriadGame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"player player1 \".concat(this.isFirstPlayer() ? \"current\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.props.G.firstPlayerHand.map((card, index) => {\n      return React.createElement(\"div\", {\n        className: \"card\",\n        onClick: () => this.onCardClick(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, card.map(v => {\n        return React.createElement(\"div\", {\n          className: \"cardScore\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, v);\n      }));\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Score: \", this.props.G.firstPlayerCaptures.length, \" \")), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.props.G.cells.map((id, index) => {\n      let cellValue = this.props.G.selectedCard ? id.card : [];\n      return React.createElement(\"div\", {\n        key: index,\n        className: \"cell\",\n        onClick: () => this.onClick(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card selected \".concat(this.playerCaptured(id.player)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, cellValue ? cellValue.map(v => {\n        return React.createElement(\"div\", {\n          className: \"cardScore\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, v);\n      }) : \"\"));\n    })), React.createElement(\"div\", {\n      className: \"player player2 \".concat(this.isFirstPlayer() ? \"\" : \"current\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.props.G.secondPlayerHand.map((card, index) => {\n      return React.createElement(\"div\", {\n        className: \"card\",\n        onClick: () => this.onCardClick(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, card.map(v => {\n        return React.createElement(\"div\", {\n          className: \"cardScore\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, v);\n      }));\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Score: \", this.props.G.secondPlayerCaptures.length, \" \")), winner);\n  }\n\n}\n\nfunction isWin() {}\n\nfunction isDraw() {}\n\nfunction checkCard(direction, playerCard, enemyCard, inv) {\n  let flipCard = false;\n\n  if (enemyCard) {\n    console.log(\"Enemy \" + enemyCard, \"Player \" + playerCard, \"Direction \" + direction);\n\n    if (playerCard[direction] > enemyCard[inv]) {\n      flipCard = true;\n      console.log(flipCard, \"yasss\");\n      return flipCard;\n    }\n  } // if yes, check if playerCard > enemyCard in corresponding direction\n\n}\n\nfunction randomizeCards(ctx) {\n  let cards = [];\n\n  for (let i = 0; i < 5; i++) {\n    cards.push(ctx.random.Die(10, 4)); // cards = source.reduce((obj, arrValue) => (obj[arrValue] = ctx.random.Die(10), obj), {}); \n    // hand.push(Object.entries(cards));\n  }\n\n  return cards;\n}\n\nfunction checkNeighbors(id) {\n  switch (id) {\n    case 0:\n      return [1, 3];\n\n    case 1:\n      return [0, 2, 4];\n\n    case 2:\n      return [1, 5];\n\n    case 3:\n      return [0, 4, 6];\n\n    case 4:\n      return [1, 3, 5, 7];\n\n    case 5:\n      return [2, 4, 8];\n\n    case 6:\n      return [3, 7];\n\n    case 7:\n      return [4, 6, 8];\n\n    case 8:\n      return [5, 7];\n\n    default:\n      console.log('Sorry, we are out of ' + id + '.');\n  }\n}\n\nfunction removeCardFromHand(card, id) {\n  card.splice(id, 1);\n}\n\nconst TripleTriad = Game({\n  setup: ctx => ({\n    cells: Array(9).fill({\n      player: null,\n      card: null\n    }),\n    firstPlayerHand: randomizeCards(ctx),\n    secondPlayerHand: randomizeCards(ctx),\n    selectedCard: null,\n    firstPlayerCaptures: [],\n    secondPlayerCaptures: []\n  }),\n  moves: {\n    // select card, select cell\n    selectCard(G, ctx, id) {\n      if (ctx.currentPlayer === '0') {\n        G.selectedCard = G.firstPlayerHand[id];\n      } else {\n        G.selectedCard = G.secondPlayerHand[id];\n      }\n    },\n\n    selectCell(G, ctx, id) {\n      let player = null;\n\n      if (G.cells[id].card === null) {\n        G.cells[id].card = G.selectedCard;\n        G.cells[id].player = ctx.currentPlayer;\n\n        if (ctx.currentPlayer === '0') {\n          G.firstPlayerCaptures.push(id);\n          player = G.firstPlayerHand;\n        } else {\n          G.secondPlayerCaptures.push(id);\n          player = G.secondPlayerHand;\n        }\n\n        removeCardFromHand(player);\n      }\n\n      const neighbors = checkNeighbors(id);\n      neighbors.map(dir => {\n        if (G.cells[dir].card !== null) {\n          let val = null;\n          let inv = null;\n\n          if (id + 1 === dir) {\n            val = 1;\n            inv = 3;\n          }\n\n          if (id + 3 === dir) {\n            val = 2;\n            inv = 0;\n          }\n\n          if (id - 1 === dir) {\n            val = 3;\n            inv = 1;\n          }\n\n          if (id - 3 === dir) {\n            val = 0;\n            inv = 2;\n          }\n\n          if (ctx.currentPlayer === '0' && G.secondPlayerCaptures.includes(dir) || ctx.currentPlayer === '1' && G.firstPlayerCaptures.includes(dir)) {\n            let capture = checkCard(val, G.selectedCard, G.cells[dir].card, inv);\n\n            if (capture) {\n              if (ctx.currentPlayer === '0') {\n                const index = G.secondPlayerCaptures.indexOf(dir);\n                G.secondPlayerCaptures.splice(index, 1);\n                G.firstPlayerCaptures.push(dir);\n              } else {\n                const index = G.firstPlayerCaptures.indexOf(dir);\n                G.firstPlayerCaptures.splice(index, 1);\n                G.secondPlayerCaptures.push(dir);\n              }\n            }\n          }\n\n          ;\n        }\n      });\n    }\n\n  },\n  flow: {\n    endGameIf: (G, ctx) => {\n      // if win\n      if (G.cells.every(cell => cell !== null)) {\n        console.log(\"end game\");\n\n        if (G.secondPlayerCaptures.length > G.firstPlayerCaptures.length) {} else {}\n      } // if draw\n\n    }\n  }\n});\nconst App = Client({\n  game: TripleTriad,\n  board: GameBoard\n});\nexport default App;","map":{"version":3,"sources":["/Users/francesca/Documents/Games/triple-triad/src/App.js"],"names":["React","Component","Client","Game","GameBoard","onCardClick","id","props","moves","selectCard","onClick","console","log","isActive","selectCell","events","endTurn","G","cells","card","isFirstPlayer","ctx","currentPlayer","playerCaptured","render","winner","gameover","gameoever","undefined","firstPlayerHand","map","index","v","firstPlayerCaptures","length","cellValue","selectedCard","player","secondPlayerHand","secondPlayerCaptures","isWin","isDraw","checkCard","direction","playerCard","enemyCard","inv","flipCard","randomizeCards","cards","i","push","random","Die","checkNeighbors","removeCardFromHand","splice","TripleTriad","setup","Array","fill","neighbors","dir","val","includes","capture","indexOf","flow","endGameIf","every","cell","App","game","board"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Client } from 'boardgame.io/react';\nimport { Game } from 'boardgame.io/core';\n\n\nclass GameBoard extends Component {\n  onCardClick(id) {\n    this.props.moves.selectCard(id);\n  }\n\n  // when grid cell is clicked\n  onClick(id) {\n    console.log(id);\n    if(this.isActive(id)) {\n      this.props.moves.selectCell(id);\n      this.props.events.endTurn();\n    }\n  }\n\n  isActive(id) {\n    if (!this.props.isActive) return false;\n    if (this.props.G.cells[id].card !== null) return false;\n    return true;\n  }\n\n  isFirstPlayer() {\n    return this.props.ctx.currentPlayer === '0';\n  }\n\n  playerCaptured(id) {\n    if (id === null) {\n      return 'blank';\n    } else {\n      return id === 0 ? 'player1' : 'player2';\n      // if it's player 1 that put the card, return player1 class\n      // else, if it's player 2,  return player2 class\n    }\n  }\n\n  render() {\n    let winner = '';\n    if (this.props.ctx.gameover) {\n      winner = this.props.ctx.gameoever.winner !== undefined ? (\n        <div id=\"winner\">Winner: {this.props.ctx.gameover.winner}</div>\n      ) : (\n        <div id=\"winner\">Draw!</div>\n      );\n    }\n    \n    return (\n      <div className=\"tripleTriadGame\">\n        <div className={`player player1 ${this.isFirstPlayer() ? \"current\" : \"\"}`}>\n          {\n              this.props.G.firstPlayerHand.map((card, index) => {\n                return (\n                  <div className=\"card\" onClick={() => this.onCardClick(index)}>\n                    { card.map((v) => {\n                        return (\n                          <div className=\"cardScore\">{v}</div>\n                        )\n                      })\n                    }\n                  </div>\n                )\n              })\n            }\n            <div>Score: {this.props.G.firstPlayerCaptures.length} </div>\n        </div>\n        <div className=\"board\">\n          {\n            this.props.G.cells.map((id, index) => {\n              let cellValue = this.props.G.selectedCard ? id.card : [];\n              return (\n                <div key={index} className=\"cell\" onClick={() => this.onClick(index)}>\n                  <div className={`card selected ${this.playerCaptured(id.player)}`}>\n                    { \n                      cellValue ? \n                      (cellValue.map((v) => {\n                        return (\n                          <div className=\"cardScore\">{v}</div>\n                        )\n                      })) :\n                      \"\"\n                    }\n                  </div>\n                </div>\n              )\n            })\n          }\n        </div>\n        <div className={`player player2 ${this.isFirstPlayer() ? \"\" : \"current\"}`}>\n          {\n            this.props.G.secondPlayerHand.map((card, index) => {\n              return (\n                <div className=\"card\" onClick={() => this.onCardClick(index)}>\n                  { card.map((v) => {\n                      return (\n                        <div className=\"cardScore\">{v}</div>\n                      )\n                    })\n                  }\n                </div>\n              )\n            })\n          }\n          <div>Score: {this.props.G.secondPlayerCaptures.length} </div>\n        </div>\n        { winner }\n      </div>\n    )\n  }\n}\n\nfunction isWin() {\n\n}\n\nfunction isDraw() {\n\n}\n\nfunction checkCard(direction, playerCard, enemyCard, inv) {\n  let flipCard = false;\n  if (enemyCard) {\n    console.log(\"Enemy \" + enemyCard, \"Player \" + playerCard, \"Direction \" + direction);\n    if (playerCard[direction] > enemyCard[inv]) {\n      flipCard = true;\n      console.log(flipCard, \"yasss\");\n      return flipCard;\n    }\n  }\n  // if yes, check if playerCard > enemyCard in corresponding direction\n}\n\nfunction randomizeCards(ctx) {\n  let cards = [];\n  for(let i = 0; i < 5; i++) {\n    cards.push(ctx.random.Die(10, 4));\n    // cards = source.reduce((obj, arrValue) => (obj[arrValue] = ctx.random.Die(10), obj), {}); \n    // hand.push(Object.entries(cards));\n  }\n  return cards;\n}\n\nfunction checkNeighbors(id) {\n  switch (id) {\n    case 0:\n      return [1, 3];\n    case 1:\n        return [0, 2, 4];\n    case 2:\n        return [1, 5];\n    case 3:\n        return [0, 4, 6];\n    case 4:\n        return [1, 3, 5, 7];\n    case 5:\n        return [2, 4, 8];\n    case 6:\n        return [3, 7];\n    case 7:\n        return [4, 6, 8];\n    case 8:\n        return [5, 7];\n    default:\n      console.log('Sorry, we are out of ' + id + '.');\n  }\n}\n\nfunction removeCardFromHand(card, id) {\n  card.splice(id, 1);\n}\n\nconst TripleTriad = Game({\n  setup: (ctx) => ({ \n    cells: Array(9).fill({player: null, card: null}),\n    firstPlayerHand: randomizeCards(ctx),\n    secondPlayerHand: randomizeCards(ctx),\n    selectedCard: null,\n    firstPlayerCaptures: [],\n    secondPlayerCaptures: [],\n  }),\n  moves: {\n    // select card, select cell\n    selectCard(G, ctx, id) {\n      if (ctx.currentPlayer === '0') {\n        G.selectedCard = G.firstPlayerHand[id];\n      } else {\n        G.selectedCard = G.secondPlayerHand[id];\n      }\n    },\n\n    selectCell(G, ctx, id) {\n      let player = null;\n      if (G.cells[id].card === null) {\n        G.cells[id].card = G.selectedCard;\n        G.cells[id].player = ctx.currentPlayer;\n        if (ctx.currentPlayer === '0') {\n          G.firstPlayerCaptures.push(id);\n          player = G.firstPlayerHand;\n        } else {\n          G.secondPlayerCaptures.push(id);\n          player = G.secondPlayerHand;\n        }\n        removeCardFromHand(player);\n      }\n\n      const neighbors = checkNeighbors(id);\n      neighbors.map((dir) => {\n        if (G.cells[dir].card !== null) {\n          let val = null;\n          let inv = null;\n          if (id+1 === dir) {\n            val = 1;\n            inv = 3;\n          } \n          if (id+3 === dir) {\n            val = 2;\n            inv = 0;\n          }\n          if (id-1 === dir) {\n            val = 3;\n            inv = 1;\n          }\n          if (id-3 === dir) {\n            val = 0;\n            inv = 2;\n          }\n\n          if ((ctx.currentPlayer === '0' && G.secondPlayerCaptures.includes(dir)) || (ctx.currentPlayer === '1' && G.firstPlayerCaptures.includes(dir))) {\n            let capture = checkCard(val, G.selectedCard, G.cells[dir].card, inv);\n            if (capture) {\n              if (ctx.currentPlayer === '0') {\n                const index = G.secondPlayerCaptures.indexOf(dir);\n                G.secondPlayerCaptures.splice(index, 1);\n                G.firstPlayerCaptures.push(dir);\n              } else {\n                const index = G.firstPlayerCaptures.indexOf(dir);\n                G.firstPlayerCaptures.splice(index, 1);\n                G.secondPlayerCaptures.push(dir);\n              }\n            }\n          };\n        }\n      })\n    }\n  },\n\n  flow: {\n    endGameIf: (G, ctx) => {\n      // if win\n      if (G.cells.every(cell => cell !== null)) {\n        console.log(\"end game\");\n        if (G.secondPlayerCaptures.length > G.firstPlayerCaptures.length) {\n          \n        } else {\n\n        }\n      }\n      // if draw\n    },\n  }\n});\n\nconst App = Client({ \n  game: TripleTriad,\n  board: GameBoard,\n});\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}